/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package infrastructure.api;

import org.junit.jupiter.api.*;
import framework.db.DbManager;
import framework.web.error.BadRequest;
import framework.web.error.Unauthorized;
import server.infrastructure.param.auth.UserSession;
import server.infrastructure.root.api.AccountAPI;
import framework.web.mail.MailServer;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.sql.SQLException;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class AccountAPITest {

    private static DbManager db;
    private static MailServer mail;

    private static String session;

    @BeforeAll
    public static void setup() {
        try{
            db = new DbManager("account_api_test", true, true, true);
            mail = configurator -> {};
        }catch (Exception e){
            throw new RuntimeException(e);
        }
    }

    @Test
    @Order(1)
    public void testAccountRegistration() throws BadRequest, SQLException {
        var account = new AccountAPI.Register();
        account.name = "Parker";
        account.email = "yui@gmail.com";
        account.password = "password";
        try(var trans = db.rw_transaction("")){
            AccountAPI.register(mail, trans, account);
            trans.commit();
        }
    }

    @Test
    @Order(2)
    public void testAccountLogin() throws SQLException, Unauthorized, UnknownHostException {
        var account = new AccountAPI.Login();
        account.email = "yui@gmail.com";
        account.password = "password";
        try(var trans = db.rw_transaction("")){
            session = AccountAPI.login(mail, InetAddress.getByName("localhost"), "Agent", trans, account);
            trans.commit();
        }
    }

    @Test
    @Order(51)
    public void testDeleteAccount() throws SQLException, Unauthorized {
        UserSession session;
        try(var conn = db.ro_conn("")){
            session = UserSession.create(AccountAPITest.session, conn);
        }
        try(var trans = db.rw_transaction("")){
            var da = new AccountAPI.DeleteAccount();
            da.email = "yui@gmail.com";
            da.password = "password";
            AccountAPI.delete_account(session, trans, da);
            trans.commit();
        }
    }

    @Test
    @Order(52)
    public void testAccountDeleted() throws SQLException, UnknownHostException {
        var account = new AccountAPI.Login();
        account.email = "yui@gmail.com";
        account.password = "password";
        try(var trans = db.rw_transaction("")){
            session = AccountAPI.login(mail, InetAddress.getByName("localhost"), "Agent", trans, account);
            Assertions.fail();
        }catch (Unauthorized e){
            Assertions.assertEquals("An account with the specified email does not exist, or the specified password is incorrect", e.getMessage());
        }
    }

    @AfterAll
    public static void close() {
        db.close();
    }
}
