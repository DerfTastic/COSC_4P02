/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package infrastructure.api;

import org.junit.jupiter.api.*;
import framework.db.DbManager;
import framework.web.error.BadRequest;
import framework.web.error.Unauthorized;
import server.Config;
import server.infrastructure.DbManagerImpl;
import server.infrastructure.DynamicMediaHandler;
import server.infrastructure.param.auth.UserSession;
import server.infrastructure.root.api.AccountAPI;
import server.infrastructure.root.api.OrganizerAPI;
import server.mail.MailServer;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.sql.SQLException;
import java.util.HashSet;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class AccountAPITest {

    private DbManager db;
    private MailServer mail;

    private final Config config = new Config(
            "send_mail", "true",
            "send_mail_on_register", "true",
            "send_mail_on_login", "true"
    );
    private final DynamicMediaHandler media = new DynamicMediaHandlerTest();

    private static class User{
        String name;
        String email;
        String password;
        String bio;
        String disp_email;
        String disp_phone_number;

        String session;

        private User(String name, String email, String password){
            this.name = name;
            this.email = email;
            this.password = password;
        }
    }

    private final User u1 = new User("Yui", "yui@gmail.com", "saas");
    private final User u2 = new User("Tui", "tui@gmail.com", "pass");
    private final User o1 = new User("Gui", "gui@gmail.com", "saap");
    private final User o2 = new User("Pui", "pui@gmail.com", "pssa");

    @BeforeAll
    public void setup() {
        try{
            db = new DbManagerImpl("account_api_test", true, true, true);
            mail = configurator -> {};
        }catch (Exception e){
            throw new RuntimeException(e);
        }
    }

    @Test
    @Order(1)
    public void testAccountRegistration() throws BadRequest, SQLException {
        var account = new AccountAPI.Register();
        for(var user : new User[]{u1, u2, o1, o2}){
            account.name = user.name;
            account.email = user.email;
            account.password = user.password;
            try(var trans = db.rw_transaction(null)){
                AccountAPI.register(mail, trans, account, config);
                trans.tryCommit();
            }
        }
    }

    @Test
    @Order(2)
    public void testAccountLogin() throws SQLException, Unauthorized, UnknownHostException, BadRequest {
        var account = new AccountAPI.Login();
        for(var user : new User[]{u1, u2, o1, o2}){
            account.email = user.email;
            account.password = user.password;
            try(var trans = db.rw_transaction(null)){
                user.session = AccountAPI.login(mail, InetAddress.getByName("localhost"), "Agent", trans, account, config);
                trans.tryCommit();
            }
        }
        // this is needed for later as we have some features which rely on users being organizers
        for(var user : new User[]{o1, o2}){
            UserSession auth;
            try(var conn = db.ro_transaction(null)){
                auth = UserSession.create(user.session, conn, null);
                conn.tryCommit();
            }
            try(var trans = db.rw_transaction(null)){
                OrganizerAPI.convert_to_organizer_account(auth, trans, null);
                trans.tryCommit();
            }
        }
    }

    @Test
    @Order(3)
    public void testListSessions() throws SQLException, Unauthorized {
        for(var user : new User[]{u1, u2, o1, o2}) {
            try (var conn = db.ro_transaction(null)) {
                var auth = UserSession.create(user.session, conn, null);
                var sessions = AccountAPI.list_sessions(auth, conn);
                Assertions.assertEquals(1, sessions.size());
                var session_id = Long.parseLong(user.session.substring(user.session.length() - 8));
                Assertions.assertEquals(session_id, sessions.getFirst().id);
                conn.tryCommit();
            }
        }
    }

    @Test
    @Order(4)
    public void testInvalidateSession() throws SQLException, Unauthorized, BadRequest, UnknownHostException {

        for(var user : new User[]{u1, u2, o1, o2}) {
            UserSession auth;
            try(var conn = db.ro_transaction(null)){
                auth = UserSession.create(user.session, conn, null);
                conn.tryCommit();
            }
            try(var conn = db.rw_transaction(null)){
                var session_id = Long.parseLong(user.session.substring(user.session.length()-8));
                AccountAPI.invalidate_session(auth, conn, session_id);
                conn.tryCommit();
            }
            try(var conn = db.ro_transaction(null)){
                var ignore = UserSession.create(user.session, conn, null);
                Assertions.fail("Session should have been invalidated");
            }catch(Unauthorized ignore){
                var account = new AccountAPI.Login();
                account.email = user.email;
                account.password = user.password;
                try(var trans = db.rw_transaction(null)){
                    user.session = AccountAPI.login(mail, InetAddress.getByName("localhost"), "Agent", trans, account, config);
                    trans.tryCommit();
                }
            }
        }
    }

    @Test
    @Order(5)
    public void testChangeAuthPassword() throws SQLException, Unauthorized, BadRequest, UnknownHostException {
        UserSession auth;
        try(var conn = db.ro_transaction(null)){
            auth = UserSession.create(u1.session, conn, null);
            conn.tryCommit();
        }
        try(var conn = db.rw_transaction(null)){
            var ca = new AccountAPI.ChangeAuth();
            ca.old_password = u1.password;
            ca.old_email = u1.email;
            ca.new_password = "new_password";
            AccountAPI.change_auth(auth, conn, ca);
            conn.tryCommit();
        }
        try(var conn = db.ro_transaction(null)){
            var ignore = UserSession.create(u1.session, conn, null);
            Assertions.fail("Session should have been invalidated");
        }catch(Unauthorized ignore){
            u1.password = "new_password";

            var account = new AccountAPI.Login();
            account.email = u1.email;
            account.password = u1.password;
            try(var trans = db.rw_transaction(null)){
                u1.session = AccountAPI.login(mail, InetAddress.getByName("localhost"), "Agent", trans, account, config);
                trans.tryCommit();
            }
        }
    }

    @Test
    @Order(6)
    public void testChangeAuthEmail() throws SQLException, Unauthorized, BadRequest, UnknownHostException {
        UserSession auth;
        try(var conn = db.ro_transaction(null)){
            auth = UserSession.create(u1.session, conn, null);
            conn.tryCommit();
        }
        try(var conn = db.rw_transaction(null)){
            var ca = new AccountAPI.ChangeAuth();
            ca.old_password = u1.password;
            ca.old_email = u1.email;
            ca.new_email = "new_yui@gmail.com";
            AccountAPI.change_auth(auth, conn, ca);
            conn.tryCommit();
        }
        try(var conn = db.ro_transaction(null)){
            var ignore = UserSession.create(u1.session, conn, null);
            Assertions.fail("Session should have been invalidated");
        }catch(Unauthorized ignore){
            u1.email = "new_yui@gmail.com";

            var account = new AccountAPI.Login();
            account.email = u1.email;
            account.password = u1.password;
            try(var trans = db.rw_transaction(null)){
                u1.session = AccountAPI.login(mail, InetAddress.getByName("localhost"), "Agent", trans, account, config);
                trans.tryCommit();
            }
        }
    }

    @Test
    @Order(7)
    public void testUpdateUser() throws SQLException, Unauthorized, BadRequest {
        UserSession auth;
        try(var conn = db.ro_transaction(null)){
            auth = UserSession.create(u1.session, conn, null);
            conn.tryCommit();
        }
        var update = new AccountAPI.UpdateUser();
        try(var conn = db.rw_transaction(null)){
            AccountAPI.update_user(auth, conn, update);
            conn.tryCommit();
        }
        update.name = "Meep";
        update.bio = java.util.Optional.of("Important");
        update.disp_phone_number = java.util.Optional.of("111-22-3333");
        update.disp_email = java.util.Optional.of("meep@hotmail.com");
        try(var conn = db.rw_transaction(null)){
            AccountAPI.update_user(auth, conn, update);
            conn.tryCommit();
        }
    }

    @Test
    @Order(8)
    public void testUpdateInfo() throws SQLException, Unauthorized, BadRequest {
        UserSession auth;
        try(var conn = db.ro_transaction(null)){
            auth = UserSession.create(u1.session, conn, null);
            conn.tryCommit();
        }
        var update = new AccountAPI.UpdateUser();
        try(var conn = db.rw_transaction(null)){
            AccountAPI.update_user(auth, conn, update);
            conn.tryCommit();
        }
        u1.name = update.name = "Meep";
        update.bio = java.util.Optional.of(u1.bio = "Important");
        update.disp_phone_number = java.util.Optional.of(u1.disp_phone_number = "111-22-3333");
        update.disp_email = java.util.Optional.of(u1.disp_email = "meep@hotmail.com");
        try(var conn = db.rw_transaction(null)){
            AccountAPI.update_user(auth, conn, update);
            conn.tryCommit();
        }
    }

    @Test
    @Order(9)
    public void testUserInfo() throws SQLException, Unauthorized {
        UserSession auth;
        try(var conn = db.ro_transaction(null)){
            auth = UserSession.create(u1.session, conn, null);
            conn.tryCommit();
        }
        try(var conn = db.ro_transaction(null)){
            var ignore = AccountAPI.userinfo(null, conn, null);
            conn.tryCommit();
            Assertions.fail("No user id present, should be unable to fetch anything");
        }catch(Unauthorized e){
            Assertions.assertEquals("No identification present", e.getMessage());
        }
        try(var conn = db.ro_transaction(null)){
            var info = AccountAPI.userinfo(auth, conn, null);
            switch(info){
                case AccountAPI.PrivateUserInfo privateUserInfo -> {
                    Assertions.assertEquals(privateUserInfo.name(), u1.name);
                    Assertions.assertEquals(privateUserInfo.email(), u1.email);
                    Assertions.assertEquals(privateUserInfo.bio(), u1.bio);
                    Assertions.assertEquals(privateUserInfo.disp_email(), u1.disp_email);
                    Assertions.assertEquals(privateUserInfo.disp_phone_number(), u1.disp_phone_number);
                }
                case AccountAPI.PublicUserInfo ignore ->
                    Assertions.fail("Personal private user info should never be returned as public");
            }
            conn.tryCommit();
        }

    }

    @Test
    @Order(51)
    public void testDeleteAccount() throws SQLException, Unauthorized {
        for(var user : new User[]{u1, o1}) {
            UserSession auth;
            try(var conn = db.ro_conn(null)){
                auth = UserSession.create(user.session, conn, null);
            }
            try(var trans = db.rw_transaction(null)){
                var da = new AccountAPI.DeleteAccount();
                da.email = user.email;
                da.password = user.password;
                AccountAPI.delete_account(auth, trans, da, null);
                trans.tryCommit();
            }
        }
    }

    @Test
    @Order(52)
    public void testAccountDeleted() throws SQLException, UnknownHostException {
        for(var user : new User[]{u1, o1}) {
            var account = new AccountAPI.Login();
            account.email = user.email;
            account.password = user.password;
            try (var trans = db.rw_transaction(null)) {
                user.session = AccountAPI.login(mail, InetAddress.getByName("localhost"), "Agent", trans, account, config);
                trans.tryCommit();
                Assertions.fail();
            } catch (Unauthorized e) {
                Assertions.assertEquals("An account with the specified email does not exist, or the specified password is incorrect", e.getMessage());
            }
        }
    }

    @Test
    @Order(52)
    public void testAccountNotDeleted() throws SQLException, UnknownHostException, Unauthorized {
        for(var user : new User[]{u2, o2}) {
            var account = new AccountAPI.Login();
            account.email = user.email;
            account.password = user.password;
            try (var trans = db.rw_transaction(null)) {
                user.session = AccountAPI.login(mail, InetAddress.getByName("localhost"), "Agent", trans, account, config);
                trans.tryCommit();
            }
        }
    }

    @AfterAll
    public void close() {
        db.close();
    }

    private static class DynamicMediaHandlerTest implements DynamicMediaHandler {
        final HashSet<Long> present = new HashSet<>();
        long id = 0;

        @Override
        public byte[] get(long id) {
            throw new RuntimeException("No!");
        }

        @Override
        public void delete(long id) {
            present.remove(id);
        }

        @Override
        public long add(byte[] data) {
            present.add(++id);
            return id;
        }
    }
}
